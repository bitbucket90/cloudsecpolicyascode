policy_keys = []
policy_list = [{"organization": "sentinel-dev-testing", "organization_id": "org-1zGSHHZHJU29Lugt", "policy_set_name": "S3_Bucket_Encryption", "policy_set_description": "Policies to Enforce Encryption on S3 Resources", "policy_engine": "opa", "workspace_ids": ["ws-CoLUfqDa3bPCDR8a", "ws-xAS8aEXtnk9namB2", "ws-XQp9EHDoBJGSA75K"], "policy_name": "S3_Bucket_Encryption", "policy_description": "description", "opa_query": "data.terraform.policies.s3.bucket_encryption.deny", "enforcement_mode": "mandatory", "policy_code": "package terraform.policies.s3.bucket_encryption\n\nimport input.tfplan as tfplan\n\n# Set allowed list in array \nallowed_sse_algorithms = [\"aws:kms\"]#[\"aws:kms\"]\n\n# Store S3 Buckets being created \ns3_buckets[r] {\n    r := tfplan.resource_changes[_]\n    r.type == \"aws_s3_bucket\"\n}\n\narray_contains(arr, elem) {\n    arr[_] = elem\n}\n\n# Enforce bucket server-side encryption with customer managed key \ndeny[reason] {\n    r := s3_buckets[_]\n    count(r.change.after.server_side_encryption_configuration) == 0\n    reason := sprintf(\n        \"%s: requires server-side encryption using a customer managed key and sse_algorithm to be on of %v\",\n        [r.address, allowed_sse_algorithms]\n    )\n} \n\n# Rule to enforce specific SSE algorithms\ndeny[reason] {\n    r := s3_buckets[_]\n    sse_configuration := r.change.after.server_side_encryption_configuration[_]\n    apply_sse_by_default := sse_configuration.rule[_].apply_server_side_encryption_by_default[_]\n    not array_contains(allowed_sse_algorithms, apply_sse_by_default.sse_algorithm)\n    reason := sprintf(\n        \"%s: expected sse_algorithm to be one of %v\",\n        [r.address, allowed_sse_algorithms]\n    )\n}"}, {"organization": "sentinel-dev-testing", "organization_id": "org-1zGSHHZHJU29Lugt", "policy_set_name": "Security_Group", "policy_set_description": "Security Groups must not allow all ingress or egress", "policy_engine": "opa", "workspace_ids": ["ws-xAS8aEXtnk9namB2", "ws-XQp9EHDoBJGSA75K"], "policy_name": "Prevent_Public", "policy_description": "description", "opa_query": "data.terraform.policies.public_ingress.deny", "enforcement_mode": "mandatory", "policy_code": "package terraform.policies.public_ingress\n\nimport input.plan as plan\n\ndeny[msg] {\n  r := plan.resource_changes[_]\n  r.type == \"aws_security_group\"\n  r.change.after.ingress[_].cidr_blocks[_] == \"0.0.0.0/0\"\n  msg := sprintf(\"%v has 0.0.0.0/0 as allowed ingress\", [r.address])\n}\n"}]